/*
template by kymb0.github.io
replace message box with... whatever you want.
using delegate in this manner allows us to AES encrypt our strings :)

ALWAYS ALWAYS ALWAYS use this as your bible for dllimports/c# signatures http://www.pinvoke.net/
Use MSDN doco for your function signature
In the even of null values in intPtr make sure you disassemble the dll containing the function to make sure you have the right one
*/

using System;
using System.Runtime.InteropServices;

namespace TestCall
{
class lol
    {
        [DllImport("kernel32", SetLastError = true, CharSet = CharSet.Ansi)]
        static extern IntPtr LoadLibrary([MarshalAs(UnmanagedType.LPStr)] string lpFileName);

        [DllImport("kernel32", CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]
        internal static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate int MessageBox(IntPtr hWnd, String text, String caption, int options);

        static void Main() 
        {
            string DllName = "user32.dll";
            string FuncName = "MessageBoxA";
            IntPtr hModule = LoadLibrary(DllName); 
            string a = "lol";
            string b = "hmm";
            uint c = 0;

            IntPtr intPtr = GetProcAddress(hModule, FuncName); 
            MessageBox mb = (MessageBox)Marshal.GetDelegateForFunctionPointer(intPtr, typeof(MessageBox));

            mb(IntPtr.Zero, a, b, 0);

     
        }
    }
}
