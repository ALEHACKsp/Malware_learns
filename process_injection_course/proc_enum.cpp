// ProcEnum.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <Windows.h> //main include for most windows apis
#include <stdio.h> //this is prefferable to the CPP iostream library
#include <TLHelp32.h> //the toolhelp header we use to enum

//here we specify the Error function which is returned in hSnapshot as printing the error message as well as information on the error via GetLastError, which we use with error lookup tool
int Error(const char* msg) {
    printf("%s (%u)", msg, GetLastError());
    return 1;
}

int main()
{ // below we call the function that will give snapshots of threads,procs, etc. The flags we provide here are to snapshot procs, with the ID being null, as we want all
    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0); //we create a pointer to our function with its flags called "hSnapshot"
    //as the documentation states that this function can fail, as such we code the exception
    if (hSnapshot == INVALID_HANDLE_VALUE)
        return Error("Failed to create snapshot"); //call helper function Error

    PROCESSENTRY32 pe; //create a structure for use with the enumeration process, so, we collect and store variables for each proc we hit
    pe.dwSize = sizeof(pe);

    if (!Process32First(hSnapshot, &pe))
        return Error("Failed in Process32First"); //call function and provide it the process snapshot aswell as a pointer to the structure, as well as declare error handling
    do {
        printf("PID: %6u (PPID: %6u) Threads: %3u %ws\n", //wew display exe with the %ws format specifier as we are using utf-16 strings by default, which is inline with all functions and data structures defined in windows headers
            pe.th32ProcessID, pe.th32ParentProcessID, pe.cntThreads, pe.szExeFile); //here we print information about the enumerated process, we declare it as an unsigned integer as 32bit PIDs are unsigned integers
    } while(Process32Next(hSnapshot, &pe)); //we call the function that grabs the next process, we use the same snapshot and structure

    CloseHandle(hSnapshot);
    return 0;

}

