
//not complete yet
// WTSEnum.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <stdio.h>
#include <WtsApi32.h> //these functions relate to terminal services, however they work quite well in a real env.
#include <Windows.h>
#include <string>


std::wstring GetUserNameFromSid(PSID sid){ //std::wstring is simply telling the compiler to look in the std (standard) namespace for the wstring idintifier
    //a SID is a binary variable length structure, in a string-like form. However will not immediately yield the actual username 
    //SYSTEM has a universal SID, and as such can be determined. standard users though have a unique SID allocated at user creation
    LookupAccountSid(nullptr, sid, ) //this allows us to obtainb both domain and username from a sid - firts arg is where to look, nullptr is local system
} //wstring is a CPP type which allows us to store a string safely without allocating memory properly
int main()
{
    DWORD level = 1; //DWORD 1 is extended information
    PWTS_PROCESS_INFO_EX info; //here we will create a pointer to a pointer, this object is filled by the function, and then referenced (NOTE we could ahve also used WTS_PROCESS_INFO_EX*)
    DWORD count;
    BOOL success = WTSEnumerateProcessesEx(WTS_CURRENT_SERVER_HANDLE, &level, WTS_ANY_SESSION, &info, &count); //first param is our local server (we can also open connections to OTHER servers
    if (!success)
        return 1;

    for (DWORD i = 0; i < count; i++) { //create a for loop, iterating through i in count, we increase i so long as i is less than i in count
        PWTS_PROCESS_INFO_EX p = info + i; //here we say that for each DWORD in the structure, for each PROC we will store a pointer to it, to call when we print
        printf("PID %6u THREAD: %3u Session: %u %ws (USERNAME: %ws)\n",
            p->ProcessId, p->NumberOfThreads, p->SessionId, p->pProcessName, //with the '->' operator, we are accessing members of our created structure through a pointer
            GetUserNameFromSid(p->pUserSid));
    }

    WTSFreeMemoryEx(WTSTypeProcessInfoLevel1), info, count); //now we release the memory we used for enumeration, specifying the level we enumerated aswell as pointer to the stored info and count
    return 0;
}
